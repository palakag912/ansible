{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "numberOfInstances": {
 	"value": "{{ numberOfInstances }}"
    },
    "storageAccountName": {
	"value": "{{ storageAccountName }}"
    },
    "adminUsername": {
      "value": "{{ adminUsername }}"
    },
    "adminPassword": {
      "value": "{{ adminPassword }}"
    },
    "sshKeyData": {
      "value": "{{ sshKeyData }}"
    },
    "dnsNameforLBIP": {
      "value": "{{ dnsNameforLBIP }}"
    },
    "vmNamePrefix": {
      "value": "{{ vmNamePrefix }}"
    },
    "imagePublisher": {
     "value": "{{ imagePublisher }}"
    },
    "imageOffer": {
      "value": "{{ imageOffer }}"
    },
    "imageSKU": {
     "value": "{{ imageSKU }}"
    },
    "lbName": {
     "value": "{{ lbName }}"
    },
    "nicNamePrefix": {
      "value": "{{ nicNamePrefix }}"
    },
    "publicIPAddressName": {
      "value": "{{ publicIPAddressName }}"
    },
    "vnetName": {
      "value": "{{ vnetName }}"
    },
    "vmSize": {
      "value": "{{ vmSize }}"
    },
    "avSetName": {
      "value": "{{ avSetName }}"
    },
    "dnsZoneName": {
      "value": "{{ dnsZoneName }}"
    },
    "dnsRecordName": {
      "value": "{{ dnsRecordName }}"
    },
    "dnsCNAME": {
      "value": "{{ dnsCNAME }}"
    },
    "scriptUrl": {
      "value": "https://medtechdevops.blob.core.windows.net/scripts/"
    }
  },
  "variables": {
    "storageAccountType": "Standard_LRS",
    "availabilitySetName": "[parameters('avSetName')]",
    "addressPrefix": "10.0.0.0/16",
    "subnetName": "Subnet-1",
    "subnetPrefix": "10.0.0.0/24",
    "publicIPAddressType": "Static",
    "sshKeyPath": "[concat('/home/',parameters('adminUsername'),'/.ssh/authorized_keys')]",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',parameters('vnetName'))]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables ('subnetName'))]",
    "publicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',parameters('publicIPAddressName'))]",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers',parameters('lbName'))]",
    "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/LoadBalancerFrontEnd')]",
    "lbPoolID": "[concat(variables('lbID'),'/backendAddressPools/BackendPool1')]",
    "lbProbeID": "[concat(variables('lbID'),'/probes/tcpProbe')]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('storageAccountName')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('availabilitySetName')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[resourceGroup().location]",
      "properties": {}
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[parameters('publicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[parameters('dnsNameforLBIP')]"
        }
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[parameters('vnetName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(parameters('nicNamePrefix'), copyindex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "nicLoop",
        "count": "[parameters('numberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', parameters('vnetName'))]",
        "[concat('Microsoft.Network/loadBalancers/', parameters('lbName'))]",
        "sshNatLoop",
        "nagiosNatLoop"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('lbID'), '/backendAddressPools/BackendPool1')]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers',parameters('lbName')),concat('/inboundNatRules/VM',copyIndex(),'-SSH'))]"
                },
                {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers',parameters('lbName')),concat('/inboundNatRules/VM',copyIndex(),'-NRPE'))]"
                }
              ]
            }
          }
        ]
      }
    },
    {
        "apiVersion": "2015-06-15",
        "type": "Microsoft.Network/loadBalancers/inboundNatRules",
        "copy": {
            "name": "sshNatLoop",
            "count": "[parameters('numberOfInstances')]"
        },
        "name": "[concat('/',parameters('lbName'),'/','VM', copyIndex(),'-SSH')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
            "[concat('Microsoft.Network/loadBalancers/',parameters('lbName'))]"
        ],
        "properties": {
            "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
            },
            "protocol": "tcp",
            "frontendPort": "[add(12200, copyIndex())]",
            "backendPort": 22,
            "enableFloatingIP": false
            }
    },
    {
        "apiVersion": "2015-06-15",
        "type": "Microsoft.Network/loadBalancers/inboundNatRules",
        "copy": {
            "name": "nagiosNatLoop",
            "count": "[parameters('numberOfInstances')]"
        },
        "name": "[concat('/',parameters('lbName'),'/','VM', copyIndex(),'-NRPE')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
            "[concat('Microsoft.Network/loadBalancers/',parameters('lbName'))]"
        ],
        "properties": {
            "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
            },
            "protocol": "tcp",
            "frontendPort": "[add(15500, copyIndex())]",
            "backendPort": 5666,
            "enableFloatingIP": false
            }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "name": "[parameters('lbName')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', parameters('publicIPAddressName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontEnd",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIPAddressID')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "BackendPool1"
          }
        ],
       "loadBalancingRules": [
          {
            "name": "HTTPRule",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "protocol": "tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('lbProbeID')]"
              }
            }
          },
          {
            "name": "HTTPSRule",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "protocol": "tcp",
              "frontendPort": 443,
              "backendPort": 443,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('lbProbeID')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "tcpProbe",
            "properties": {
              "protocol": "tcp",
              "port": 80,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(parameters('vmNamePrefix'), copyindex())]",
      "copy": {
        "name": "virtualMachineLoop",
        "count": "[parameters('numberOfInstances')]"
      },
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', parameters('nicNamePrefix'), copyindex())]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]",
        "nicLoop"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(parameters('vmNamePrefix'), copyIndex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "path": "[variables('sshKeyPath')]",
                  "keyData": "[parameters('sshKeyData')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[parameters('imagePublisher')]",
            "offer": "[parameters('imageOffer')]",
            "sku": "[parameters('imageSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://',parameters('storageAccountName'),'.blob.core.windows.net/vhds/','osdisk', copyindex(), '.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(parameters('nicNamePrefix'),copyindex()))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
             "enabled": "true",
             "storageUri": "[concat('http://',parameters('storageAccountName'),'.blob.core.windows.net')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Network/dnszones",
      "name": "[parameters('dnsZoneName')]",
      "apiVersion": "2015-05-04-preview",
      "location": "global",
      "properties": {}
    },
    {
      "type": "Microsoft.Network/dnszones/cname",
      "name": "[concat(parameters('dnsZoneName'), concat('/', parameters('dnsRecordName')))]",
      "apiVersion": "2015-05-04-preview",
      "location": "global",
      "properties": {
        "TTL": 3600,
        "CNAMERecord": {
            "cname": "[parameters('dnsCNAME')]"
          }
      },
      "dependsOn": [
        "[concat('Microsoft.Network/dnszones/', parameters('dnsZoneName'))]"
      ]
    }
  ]
}
